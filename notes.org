#+TITLE: Let's Build an Interpreter

Interpreter Tutorial after:
https://ruslanspivak.com/lsbasi-part1/

* Interpreter
** Concepts
*** Token
Stores a type and a value
Example:
#+BEGIN_SRC python
INTEGER, PLUS, EOF = 'INTEGER', 'PLUS', 'EOF'

class Token(object):
    def __init__(self, type, value):
        self.type = type
        self.value = value

token = Token(INTEGER, 1)
#+END_SRC

*** Lexical Analyzer (Lexer)
Convert string to tokenstream
*** Parsing
Finding structure in the tokenstream
** Helpers
*** Syntax Diagrams
#+attr_org: :width 500px
#+CAPTION: Simple syntax diagram for calculator
[[file:images/syntax_diagram.png][Example]]

*** (E)BNF (context-free grammars)
Modified EBNF notation:

expr    : factor ((MUL | DIV) factor)*
factor  : INTEGER

- A grammar consists of a sequence of *rules* (productions)
- A rules consists of a non-terminal the *head*(left-hand) and a sequence of terminals the *body*(right-hand)
- tokens are *terminals*
- the non-terminal on the left side of the first rule is the *start symbol*
- Make code from grammar:
  1. Each rule, R, defined in the grammar, becomes a method with the same name, and references to that rule become a method call: R(). The body of the method follows the flow of the body of the rule using the very same guidelines.
  2. Alternatives (a1 | a2 | aN) become an if-elif-else statement
  3. An optional grouping (â€¦)* becomes a while statement that can loop over zero or more times
  4. Each token reference T becomes a call to the method eat: eat(T). The way the eat method works is that it consumes the token T if it matches the current lookahead token, then it gets a new token from the lexer and assigns that token to the current_token internal variable.
**** Precedence Table
***** Example:
|------------+---------------+-----------|
| precedence | associativity | operators |
|      level |               |           |
|------------+---------------+-----------|
|          2 | left          | +, -      |
|          1 | left          | *, /      |
|------------+---------------+-----------|

expr      :  term ((PLUS | MINUS) term)*
term      :  factor ((MUL | DIV) factor)*
factor    :  INTEGER

***** Construct grammar from precedence
1. For each level of precedence define a non-terminal. The body of a production for the non-terminal should contain arithmetic operators from that level and non-terminals for the next higher level of precedence.
2. Create an additional non-terminal factor for basic units of expression, in our case, integers. The general rule is that if you have N levels of precedence, you will need N + 1 non-terminals in total: one non-terminal for each level plus one non-terminal for basic units of expression.
*** Parse trees
- Tree structure that symbolizes the parsing
- Example for: 14 + 2 * 3 - 6 / 2
  [[file:images/parsetree.png][Example]]
 
*** (Abstract) Syntax Trees
- Intermediate representation.
- Parser -> AST -> Interpreter
- Example:
  #+BEGIN_SRC python
class AST(object):
    """Base class for AST nodes."""
    pass

class BinOp(AST):
    """Node for all binary operators"""
    def __init__(self, left, op, right):
        self.left = left
        self.token = self.op = op
        self.right = right

class Num(AST):
    def __init__(self, token):
        self.token = token
        self.value = token.value
  #+END_SRC
- Nodes store the token to create them for convinience
**** Traversing the Tree
- easiest is postorder traversal (depth first search): (Python recursion depth?)
#+BEGIN_SRC python
def visit(node):
    for child in node.children:
        visit(child)
    # do actions (postorder traversal)
#+END_SRC

* 2do
** TODO Do the complete documentation!
*** TODO Write the Readme (github)
** TODO Custom exceptions that are easier to read
** DONE Fix bug with -e flag
- "d20 >= 10" etc. does not seem to work
** DONE Comments
*** DONE diceengine.py
*** DONE lexer.py
*** DONE syntaxtree.py
*** DONE diceparser.py
*** DONE interpreter.py
*** DONE preprocessor.py
*** DONE dice.py
** Viewer
*** DONE implement axial labels and syntax for labels:
- Command *SPACE* parameter
** Bot
*** DONE implement the showing of images
**** DONE dice.py should be able to call to viewer to generate images directly
*** DONE implement limits for diceengine
*** DONE Multiline interpretation as multiple statements INCLUDING !define
* Dice Rules
** Examples
|-----------------------+-------------+----------------------------------------|
| Example               | Rule        | Result                                 |
|-----------------------+-------------+----------------------------------------|
| 1d6                   | NdA         | Throw N dice of value A                |
| 2 + 2                 | x + y       | add x to y                             |
| 2 - 3                 | x - y       | subtract 3 from 2 and cap to 0         |
| 1d20 + 2 >= 18        | a > b       | boolean comparision                    |
| 1d20 >= 15 -> 1d6 + 2 | if a then b | if left side is true return right side |
|-----------------------+-------------+----------------------------------------|

** Precedence
Reduced Instruction Set: +, >=, d
|------------+------------------|
| precedence | operators        |
|      level |                  |
|------------+------------------|
|          4 | ->               |
|          3 | >=, <=, <, >, == |
|          2 |                  |
|          1 | d                |
|------------+------------------|

** Grammar
expr      :  throw (IF_THEN side)?
throw     :  side (GREATER_THEN side)?
side      :  term (PLUS term)*
term      :  factor (d factor)?
factor    :  INTEGER

* Probability Rules
** Interactive Test:
#+BEGIN_SRC python
from interpreter import PropInterpreter, Lexer
text = "1d20 + 5 >= 20"
return PropInterpreter(Lexer(text)).expr()
#+END_SRC

#+RESULTS:
| True | : | 0.3 | False | : | 0.7 |

** Examples
|----------------+-------+-----------------------------------------------------------------|
| Example        | Rule  | Result                                                          |
|----------------+-------+-----------------------------------------------------------------|
| 2d6            | NdA   | Generate probability Distribution for every result 2d6 can have |
| 2 + 2          | x + y | add x to y                                                      |
| DIS - 3        | x - y | subtract 3 from every entry of the distribution and cap to 0    |
| 1d20 + 2 >= 18 | a > b | boolean comparision. Collapses probabilty to two                |
| 1d20![5:10]    |       | Probability distribution from d20 between 5 and 10              |
|----------------+-------+-----------------------------------------------------------------|

** Datatypes and Operators
*** Datatypes:
- Integer
- Distribution (Dist) : Num, Prop pairs
- List
- Resultlist (Res)

*** Operators and Datatypes
|------------+-----------+------------+--------------+------------------------|
| Operator   | Left Type | Right Type | Result Types | Rule                   |
|------------+-----------+------------+--------------+------------------------|
| +          | Int       | Dist       | Dist         | Add Int to every num   |
|            |           | List       | List         | Add Int to every num   |
|            |           | Int        | Int          | Int + Int              |
|            |           | Res        | Res          |                        |
|            |           |            |              |                        |
|            | Dist      | Dist       | Dist         |                        |
|            |           | Int        | Dist         |                        |
|            |           |            |              |                        |
|            | List      | Int        | List         |                        |
|            |           |            |              |                        |
|            | Res       | Res        | Res          |                        |
|            |           | Int        | Res          |                        |
|------------+-----------+------------+--------------+------------------------|
| -          | Int       | Dist       | Dist         |                        |
|            |           | Int        | Int          |                        |
|            |           | List       | List         |                        |
|            |           |            |              |                        |
|            | Dist      | Dist       | Dist         |                        |
|            |           | Int        | Int          |                        |
|            |           |            |              |                        |
|            | List      | Int        | List         |                        |
|------------+-----------+------------+--------------+------------------------|
| "*"        | Int       | Int        | Int          |                        |
|            |           | Dist       | Dist         |                        |
|            |           | List       | List         |                        |
|            |           |            |              |                        |
|            | Dist      | Int        | Dist         |                        |
|            |           |            |              |                        |
|            | List      | Int        | List         |                        |
|------------+-----------+------------+--------------+------------------------|
| \/         | Int       | Int        | Int          | Integer Division       |
|            |           |            |              |                        |
|            | Dist      | Int        | Dist         | Int Div                |
|            |           |            |              |                        |
|            | List      | Int        | List         | Int Div, remove double |
|------------+-----------+------------+--------------+------------------------|
| d          | Int       | Int        | Dist         |                        |
|------------+-----------+------------+--------------+------------------------|
| >=, <=,    | Int       | Dist       | Res          |                        |
| "==", <, > |           |            |              |                        |
|            | Dist      | Int        | Res          |                        |
|            |           |            |              |                        |
|            | List      | Dist       | Res          |                        |
|            |           |            |              |                        |
|            | Dist      | List       | Res          |                        |
|------------+-----------+------------+--------------+------------------------|
| ->         | Res       | Dist       | Res          |                        |
|            |           | Int        | Res          |                        |
|------------+-----------+------------+--------------+------------------------|


** Precedence
Reduced Instruction Set: +, >=, d
|------------+-----------------|
| precedence | operators       |
|      level |                 |
|------------+-----------------|
|          7 | -> \vert \vert/ |
|          6 | >=              |
|          5 | +-              |
|          4 | */              |
|          3 | !               |
|          2 | [:]             |
|          1 | d h l           |
|          0 | ()              |
|------------+-----------------|

** Grammar
expr      :  comp (RES comp ((ELSE comp) | ELSEDIV)?)?
comp      :  side ((GREATER_OR_EQUAL | LESS_OR_EQUAL | GREATER | LESS | EQUAL) side)?
side      :  term ((ADD | SUB) term)*
term      :  res ((MUL | DIV) res)*
res       :  (PROP | ADV)? index
index     :  roll (brack)?
roll      :  factor (ROLL factor ((HIGH | LOW) factor)?)?
factor    :  INTEGER | LPAREN exp RPAREN | brack | ROLL factor | DIS factor | ADV factor
brack     :  LBRACK expr (COLON expr | (COMMA expr)*) RBRACK

** 2do (Yet to implement)
- Defining what the labels will be in the end:
  [!10-15] + 5:
  - will compare against [15-20] but results will be noted against [10-15]
- Resolving Results:
  - -> Res = Average damage for range of ac
- Dist -> Res: Multiply Every result with changse in distribution

* Diceengine
for dA (A sided dice)
Advantage: P(X=x) = 2 / A ** 2 * (x - 1) + (1 / A) ** 2
Disadvantage: P(X=x) = 2 / A ** 2 * (x + 1) + (1 / A) ** 2
